/* Plugin generated by AMXX-Studio */


/* Credits:
	- DJEarthQuake aka SPiNX: random symbol & rainbow color idea.
	- Bugsy: Thanks for showing me how to use bitsums, comes in very handy & optimizing my code alot.
	- HamletEagle: Thanks for helping me out with the snipers cvar.
	- WarrioR: For delivering me the hitmarker sound.
*/

#include <amxmodx>
#include <amxmisc>
#include <hamsandwich>

#define iRainbow random_num(10, 255)
#define TASKID 85621

#pragma semicolon 1

// pCvars
new pPlugin;
new pRainbow;
new pRandomHitmarkers;
new pSnipersOnly;
new pSounds;
new pSymbol;
new pColorRed;
new pColorGreen;
new pColorBlue;
new pXPosition;
new pYPosition;
new pHoldTime;
new pDeadHitMarker;
new pDeadColorRed;
new pDeadColorGreen;
new pDeadColorBlue;

new const szSymbols[][] =
{
	"-",
	"\",
	"|",
	"/",
	"*",
	"+",
	"x"
};

new const gPluginVersion[] = "1.8";
new const gSound[] = "hitmarkers/hitmarkers.wav";

new gWeaponList = (1 << CSW_SCOUT) | (1 << CSW_AWP) | (1 << CSW_SG550) | (1 << CSW_G3SG1);

public plugin_init()
{
	register_plugin("COD: HitMarkers", gPluginVersion, "LadderGoat");

	RegisterHam(Ham_TakeDamage, "player", "PostTakeDamage", 1);

	pPlugin = register_cvar("hm_hitmarkers", "1"); 			// Set to 0 to disable hitmarkers
	pRainbow = register_cvar("hm_rainbow", "0"); 			// Set to 1 to enable rainbow hitmarkers
	pRandomHitmarkers = register_cvar("hm_random", "0"); 	// Set to 1 to enable random hitmarkers
	pSnipersOnly = register_cvar("hm_snipers", "0"); 		// Set to 1 to enable hitmarkers only for snipers
	pSounds = register_cvar("hm_sounds", "0"); 				// Set to 1 to enable hitmarker sounds
	pSymbol = register_cvar("hm_symbol", "x"); 				// Hitmarker symbol (Requires hm_random "0")
	pColorRed = register_cvar("hm_red", "165"); 			// RGB - Red (Requires hm_rainbow "0")
	pColorGreen = register_cvar("hm_green", "165"); 		// RGB - Green (Requires hm_rainbow "0")
	pColorBlue = register_cvar("hm_blue", "165"); 			// RGB - Blue (Requires hm_rainbow "0")
	pDeadHitMarker = register_cvar("hm_dead", "1"); 		// Sets a different color when victim died.
	pDeadColorRed = register_cvar("hm_dead_red", "255"); 	// RGB Dead - Red (Requires hm_dead "1")
	pDeadColorGreen = register_cvar("hm_dead_green", "0"); 	// RGB Dead - Green (Requires hm_dead "1")
	pDeadColorBlue = register_cvar("hm_dead_blue", "0"); 	// RGB Dead - Blue (Requires hm_dead "1")
	pXPosition = register_cvar("hm_x", "-1.0"); 			// x pos
	pYPosition = register_cvar("hm_y", "-1.0"); 			// y pos
	pHoldTime = register_cvar("hm_holdtime", "0.5"); 		// Hud hold time
}

public plugin_precache()
{
	precache_sound(gSound);
}

public client_disconnected(id)
{
	remove_task(id + TASKID);
}

public PostTakeDamage(iVictim, iInflictor, iAttacker, Float:iDamage, iDamagebits)
{
	if(get_pcvar_num(pPlugin) && is_user_connected(iAttacker) && (get_user_team(iVictim) != get_user_team(iAttacker)))
	{
		new bool:bShowHitMarker;

		if(!get_pcvar_num(pSnipersOnly))
		{
			if(gWeaponList & (1 << get_user_weapon(iAttacker)))
			{
				bShowHitMarker = true;
			}
		}

		else
		{
			bShowHitMarker = true;
		}

		if(bShowHitMarker)
		{
			new isVictimAlive = is_user_alive(iVictim);

			new iRed, iGreen, iBlue, szSymbol[2];
			get_pcvar_string(pSymbol, szSymbol, charsmax(szSymbol));

			if(isVictimAlive)
			{
				if(get_pcvar_num(pRainbow))
				{
					iRed = iRainbow;
					iGreen = iRainbow;
					iBlue = iRainbow;
				}

				else
				{
					iRed = get_pcvar_num(pColorRed);
					iGreen = get_pcvar_num(pColorGreen);
					iBlue = get_pcvar_num(pColorBlue);
				}
			}

			else if(!isVictimAlive && get_pcvar_num(pDeadHitMarker))
			{
				iRed = get_pcvar_num(pDeadColorRed);
				iGreen = get_pcvar_num(pDeadColorGreen);
				iBlue = get_pcvar_num(pDeadColorBlue);
			}

			set_hudmessage(iRed, iGreen, iBlue, get_pcvar_float(pXPosition), get_pcvar_float(pYPosition) , 0, 2.0, get_pcvar_float(pHoldTime) , 0.0, 0.0, -1);
			show_hudmessage(iAttacker, "%s" , get_pcvar_num(pRandomHitmarkers) ? szSymbols[random(sizeof(szSymbols))] : szSymbol);

			if(get_pcvar_num(pSounds))
			{
				set_task(0.110, "PlaySound", iAttacker + TASKID);
			}
		}
	}
}

public PlaySound(iAttacker)
{
	iAttacker -= TASKID;
	client_cmd(iAttacker, "spk %s", gSound);
}
